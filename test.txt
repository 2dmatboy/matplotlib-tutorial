{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "2- Keras-Functional API.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2dmatboy/matplotlib-tutorial/blob/master/test.txt\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wb1sPQeeWqhD",
        "colab_type": "text"
      },
      "source": [
        " https://keras.io/getting-started/functional-api-guide/"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wcDB0tfzOl8r",
        "colab_type": "text"
      },
      "source": [
        "1. Using the functional API brings you **all possibilities**.\n",
        "\n",
        "2. When using the functional API, ***you need to keep track of*** `inputs` and `outputs`, **instead of just defining layers**."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gascqV_sS9Pn",
        "colab_type": "text"
      },
      "source": [
        "---\n",
        "Complex model topologies such as:\n",
        "\n",
        "1. Multi-input models,\n",
        "2. Multi-output models,\n",
        "3. Models with shared layers (the same layer called several times),\n",
        "4. Models with non-sequential data flows (e.g. residual connections).\n",
        "---\n",
        "In Modeling note that:\n",
        "\n",
        "1. A layer instance is callable and returns a tensor.\n",
        "2. Input tensors and output tensors are used to define a `tf.keras.Model` instance.\n",
        "3. This model is trained just like the **Sequential** model.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jTcE_JPHOb6l",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# 1-first step : geometry of the model\n",
        "inputs = tf.keras.Input(shape=(32,))  # \n",
        "\n",
        "x = layers.Dense(64, activation='relu')(inputs) # calculating  the first layer \n",
        "x = layers.Dense(64, activation='relu')(x)     # calculating  the second layer \n",
        "\n",
        "predictions = layers.Dense(10, activation='softmax')(x) # last layer or final result\n",
        "\n",
        "\n",
        "\n",
        "# 2-second step : putting the layers together, construction of the model \n",
        "model = tf.keras.Model(inputs=inputs, outputs=predictions)\n",
        "model.compile(optimizer=tf.keras.optimizers.RMSprop(0.001),\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "\n",
        "# 3-Training the Model \n",
        "model.fit(data, labels, batch_size=32, epochs=5)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dzqLtOBj2d97",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "eae02e98-f5ca-4ffc-e464-2a99c347f625"
      },
      "source": [
        "!ls"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "sample_data  test.txt\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7ksx37fI5eTi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "! touch test.txt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ylgdQpsG5hRs",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}